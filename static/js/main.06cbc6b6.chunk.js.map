{"version":3,"sources":["components/cards/Card.js","components/cards/Cards.js","api/index.js","components/countryPicker/CountryPicker.js","components/charts/Chart.js","containers/App.js","index.js","images/coronaImg.png"],"names":["Card","title","value","color","date","description","className","start","end","duration","separator","Cards","data","confirmed","deaths","recovered","lastUpdate","Date","toDateString","URL","fetchCardData","country","a","changeable_URL","axios","get","modifiedData","console","log","fetchCountriesNames","countries","CountriesNames","map","name","fetchDailyData","daysData","dailyData","total","reportDate","CountryPicker","countryChange","useState","setCountries","useEffect","initialData","fetch_api","id","onChange","e","target","i","key","Chart","setDailyData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","text","App","state","handleCountryChange","clickedCountry","Country_Data","setState","initial_Card_Data","this","src","covidImg","alt","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.06cbc6b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nconst Card = ({title,value,color,date,description})=>{\r\n\treturn(\r\n\t\t<article className={`w4-m w5-ns hidden bb shadow-5 br3 b--${color} bw3 mv4 mh2`}>\r\n\t\t\t\t<h1 className=\"f4 bg-near-white br3 br--top black-60 mv0 pv2 ph3\">Infected</h1>\r\n\t\t\t  <div className=\"pa3 bt b--black-10\">\r\n\t\t\t    <p className=\"f5 f3-ns lh-copy mv0 pv1\">\r\n\t\t\t    \t<CountUp  start={0} end={value} duration={2.5} separator=\",\" />\r\n\t\t\t    </p>\r\n\t\t\t    <p className=\"f6 f5-ns lh-copy mv0 o-70\">{date}</p>\r\n\t\t\t    <p className=\"f6 f6-ns lh-copy mv0\">{description}</p>\r\n\t\t\t  </div>\t\t\t\t\r\n\t\t</article>\t\t\r\n\t)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cards = ({ data:{confirmed,deaths,recovered,lastUpdate} })=>{\r\n\r\n\tif (confirmed) {\r\n\t\treturn(\r\n\t\t\t<div className='container'>\r\n\t\t\t\t<Card title={'Infected'} value={confirmed} color={'blue'} date={new Date(lastUpdate).toDateString()} description={'Number of infected caused by COVID-19.'} />\r\n\t\t\t\t<Card title={'Recovered'} value={recovered} color={'green'} date={new Date(lastUpdate).toDateString()} description={'Number of recoveries from COVID-19.'} />\r\n\t\t\t\t<Card title={'Deaths'} value={deaths} color={'red'} date={new Date(lastUpdate).toDateString()} description={'Number of deaths caused by COVID-19.'} />\r\n\t\t\t</div>\r\n\t\t )\t\r\n\t}else{\r\n\t\treturn <h1 className='center'>LOADING...</h1>\r\n\t}\t\r\n}\r\nexport default Cards;","import axios from 'axios';\r\nconst URL ='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchCardData = async (country)=>{\r\n\ttry{\r\n\t\tlet changeable_URL = URL;\r\n\t\tif(country)\r\n\t\t\tchangeable_URL = `${URL}/countries/${country}`\r\n\r\n\t\tconst {data : {confirmed, deaths, recovered, lastUpdate} } = await axios.get(changeable_URL);\r\n\t\tconst modifiedData = {\r\n\t\t\tconfirmed : confirmed.value,\r\n\t\t\tdeaths : deaths.value,\r\n\t\t\trecovered : recovered.value,\r\n\t\t\tlastUpdate : lastUpdate\r\n\t\t}\r\n\t\treturn modifiedData;\r\n\t}catch(error){\r\n\t\tconsole.log('unable to get cad data',error)\r\n\t}\t\r\n}\r\n\r\nexport const fetchCountriesNames = async ()=>{\r\n\ttry{\r\n\t\tconst { data : {countries} } = await axios.get(`${URL}/countries`);\r\n\t\tconst CountriesNames = countries.map(country=>country.name);\r\n\t\treturn CountriesNames;\r\n\r\n\t}catch(error){\r\n\t\tconsole.log('unable to get countries names',error)\r\n\t}\r\n}\r\n\r\nexport const fetchDailyData = async ()=>{\r\n\ttry{\r\n\r\n\t\tconst { data } = await axios.get(`${URL}/daily`) //return an array\r\n\t\tconst daysData = data.map(dailyData=>({\r\n\t\t\tconfirmed : dailyData.confirmed.total,\r\n\t\t\tdeaths : dailyData.deaths.total,\r\n\t\t\tdate : dailyData.reportDate\r\n\t\t}));\r\n\t\treturn daysData;\r\n\r\n\t}catch(error){\r\n\t\tconsole.log('unable to get daily data',error)\r\n\t}\r\n}","import React,{ useState, useEffect } from 'react';\r\nimport {fetchCountriesNames} from '../../api' //return an array\r\n\r\nconst CountryPicker = ({ countryChange })=>{\r\n\r\n\tconst [countries, setCountries] = useState([]);\r\n\tuseEffect( ()=>{\r\n\t\tconst fetch_api = async ()=>{\r\n\t\t\tconst initialData = await fetchCountriesNames();\r\n\t\t\tsetCountries(initialData);\r\n\t\t}\r\n\t\tfetch_api();\r\n\t},[])\r\n\r\n\tif (countries[0]) {\r\n\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<select \r\n\t\t\t\tid=\"countries\" \r\n\t\t\t\tclassName=\"w-100 ph5 db h2 f6 bg-near-white ba b--sliver gray\" \r\n\t\t\t\tname=\"\"\r\n\t\t\t\tonChange={(e)=>countryChange(e.target.value)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"\" >Global</option>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcountries.map( (country,i) => <option key={i} value={country} >{country}</option> )\r\n\t\t\t\t\t}\r\n\t\t\t\t\t  \r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\telse{\r\n\t\treturn <h1>...</h1>\r\n\t}\r\n}\r\nexport default CountryPicker;","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport { fetchDailyData } from '../../api' ;\r\n\r\nconst Chart = ({ data:{confirmed,deaths,recovered}, country })=>{\r\n\tconst [dailyData, setDailyData] = useState([])\r\n\tuseEffect( ()=>{\r\n\t\tconst fetch_api = async ()=>{\r\n\t\t\tconst initialData = await fetchDailyData(); //return an array\r\n\t\t\tsetDailyData(initialData)\r\n\t\t}\r\n\t\tfetch_api();\r\n\t},[])\r\n\r\n\tconst lineChart = (\r\n\t    dailyData[0] ? (\r\n\t      <Line\r\n\t        data={{\r\n\t          labels: dailyData.map((data) => data.date),\t//return an array\r\n\t          datasets: [{\r\n\t            data: dailyData.map((data) => data.confirmed),\t// return an array\r\n\t            label: 'Infected',\r\n\t            borderColor: '#3333ff',\r\n\t            fill: true,\r\n\t          }, {\r\n\t            data: dailyData.map((data) => data.deaths),\r\n\t            label: 'Deaths',\r\n\t            borderColor: 'red',\r\n\t            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n\t            fill: true,\r\n\t          },\r\n\t          ],\r\n\t        }}\r\n\t      />\r\n\t    ) : null\r\n\t);\r\n\tconst barChart = (\r\n\t\t//console.log(confirmed,deaths,recovered)\r\n\t\tconfirmed \r\n\t\t? (<Bar \r\n\t\t\tdata={{\r\n\t\t\t\tlabels : ['Infected','Recovered','Deaths'],\r\n\t\t\t\tdatasets : [{\r\n\t\t\t\t\tlabel : 'People',\r\n\t\t\t\t\tbackgroundColor : ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n\t\t\t\t\tdata : [confirmed, recovered, deaths],\r\n\t\t\t\t}]\r\n\t\t\t}}\r\n\t\t\toptions = {{\r\n\t\t\t\tlegend : {display : false},\r\n\t\t\t\ttitle : {display : true, text : `Current state in ${country}`}\r\n\t\t\t}}\r\n\t\t\t/>)\r\n\t\t: null\r\n\t)\r\n\r\n\treturn(\r\n\t\t<div className='w-60 center pa3'>\r\n\t\t\t{ country ? barChart : lineChart}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Chart;","import React,{ Component } from 'react';\r\nimport {Cards, CountryPicker, Chart} from '../components'\r\nimport {fetchCardData} from '../api' //return an object\r\nimport covidImg from '../images/coronaImg.png';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    country : '',\r\n    data : {} ,\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const initial_Card_Data = await fetchCardData();\r\n    this.setState({data : initial_Card_Data})\r\n  }\r\n  handleCountryChange = async (clickedCountry)=>{\r\n    const Country_Data = await fetchCardData(clickedCountry);\r\n    this.setState({ data : Country_Data, country : clickedCountry })\r\n  }\r\n  render(){\r\n    const {  data, country } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <img className='coronaImg mt3' src={covidImg} alt='COVID-19' />\r\n        <Cards data={data} />\r\n        <CountryPicker countryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons'\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","module.exports = __webpack_public_path__ + \"static/media/coronaImg.d7265326.png\";"],"sourceRoot":""}